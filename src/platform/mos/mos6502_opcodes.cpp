#include "mos6502_opcodes.h"

#include <cstring>
#include <cstdlib>
#include <cstdio>

using namespace mos6502;

OpcodeGB Opcodes::opcodesSpecs[] =
{
  {               "NOP", 1, { 4,  0},  0, 0}, //00
  {       "LD BC, %.2X", 3, {12,  0},  0, 0}, //01
  {        "LD (BC), A", 1, { 8,  0},  0, 0}, //02
  {            "INC BC", 1, { 8,  0},  0, 0}, //03
  {             "INC B", 1, { 4,  0},  0, 0}, //04
  {             "DEC B", 1, { 4,  0},  0, 0}, //05
  {        "LD B, %.2X", 2, { 8,  0},  0, 0}, //06
  {              "RLCA", 1, { 4,  0},  0, 0}, //07
  {     "LD (%.2X), SP", 3, {20,  0},  0, 0}, //08
  {        "ADD HL, BC", 1, { 8,  0},  0, 0}, //09
  {        "LD A, (BC)", 1, { 8,  0},  0, 0}, //0A
  {            "DEC BC", 1, { 8,  0},  0, 0}, //0B
  {             "INC C", 1, { 4,  0},  0, 0}, //0C
  {             "DEC C", 1, { 4,  0},  0, 0}, //0D
  {        "LD C, %.2X", 2, { 8,  0},  0, 0}, //0E
  {              "RRCA", 1, { 4,  0},  0, 0}, //0F
  
  {              "STOP", 1, { 0,  0},  0, 0}, //10
  {       "LD DE, %.2X", 3, {12,  0},  0, 0}, //11
  {        "LD (DE), A", 1, { 8,  0},  0, 0}, //12
  {            "INC DE", 1, { 8,  0},  0, 0}, //13
  {             "INC D", 1, { 4,  0},  0, 0}, //14
  {             "DEC D", 1, { 4,  0},  0, 0}, //15
  {        "LD D, %.2X", 2, { 8,  0},  0, 0}, //16
  {               "RLA", 1, { 4,  0},  0, 0}, //17
  {       "JR (PC%+2d)", 2, {12,  0},  0, 1}, //18
  {        "ADD HL, DE", 1, { 8,  0},  0, 0}, //19
  {        "LD A, (DE)", 1, { 8,  0},  0, 0}, //1A
  {            "DEC DE", 1, { 8,  0},  0, 0}, //1B
  {             "INC E", 1, { 4,  0},  0, 0}, //1C
  {             "DEC E", 1, { 4,  0},  0, 0}, //1D
  {        "LD E, %.2X", 2, { 8,  0},  0, 0}, //1E
  {               "RRA", 1, { 4,  0},  0, 0}, //1F
  
  {   "JR NZ, (PC%+2d)", 2, {12,  8},  0, 1}, //20
  {       "LD HL, %.2X", 3, {12,  0},  0, 0}, //21
  {       "LDI (HL), A", 1, { 8,  0},  0, 0}, //22
  {            "INC HL", 1, { 8,  0},  0, 0}, //23
  {             "INC H", 1, { 4,  0},  0, 0}, //24
  {             "DEC H", 1, { 4,  0},  0, 0}, //25
  {        "LD H, %.2X", 2, { 8,  0},  0, 0}, //26
  {               "DAA", 1, { 4,  0},  0, 0}, //27
  {    "JR Z, (PC%+2d)", 2, {12,  8},  0, 1}, //28
  {        "ADD HL, HL", 1, { 8,  0},  0, 0}, //29
  {       "LDI A, (HL)", 1, { 8,  0},  0, 0}, //2A
  {            "DEC HL", 1, { 8,  0},  0, 0}, //2B
  {             "INC L", 1, { 4,  0},  0, 0}, //2C
  {             "DEC L", 1, { 4,  0},  0, 0}, //2D
  {        "LD L, %.2X", 2, { 8,  0},  0, 0}, //2E
  {               "CPL", 1, { 4,  0},  0, 0}, //2F
  
  {   "JR NC, (PC%+2d)", 2, {12,  8},  0, 1}, //30
  {       "LD SP, %.2X", 3, {12,  0},  0, 0}, //31
  {       "LDD (HL), A", 1, { 8,  0},  0, 0}, //32
  {            "INC SP", 1, { 8,  0},  0, 0}, //33
  {          "INC (HL)", 1, {12,  0},  0, 0}, //34
  {            "DEC HL", 1, {12,  0},  0, 0}, //35
  {     "LD (HL), %.2X", 2, {12,  0},  0, 0}, //36
  {               "SCF", 1, { 4,  0},  0, 0}, //37
  {    "JR C, (PC%+2d)", 2, {12,  8},  0, 1}, //38
  {        "ADD HL, SP", 1, { 8,  0},  0, 0}, //39
  {       "LDD A, (HL)", 1, { 8,  0},  0, 0}, //3A
  {            "DEC SP", 1, { 8,  0},  0, 0}, //3B
  {             "INC A", 1, { 4,  0},  0, 0}, //3C
  {             "DEC A", 1, { 4,  0},  0, 0}, //3D
  {        "LD A, %.2X", 2, { 8,  0},  0, 0}, //3E
  {               "CCF", 1, { 4,  0},  0, 0}, //3F
  
  {           "LD B, B", 1, { 4,  0},  0, 0}, //40
  {           "LD B, C", 1, { 4,  0},  0, 0}, //41
  {           "LD B, D", 1, { 4,  0},  0, 0}, //42
  {           "LD B, E", 1, { 4,  0},  0, 0}, //43
  {           "LD B, H", 1, { 4,  0},  0, 0}, //44
  {           "LD B, L", 1, { 4,  0},  0, 0}, //45
  {        "LD B, (HL)", 1, { 8,  0},  0, 0}, //46
  {           "LD B, A", 1, { 4,  0},  0, 0}, //47
  {           "LD C, B", 1, { 4,  0},  0, 0}, //48
  {           "LD C, C", 1, { 4,  0},  0, 0}, //49
  {           "LD C, D", 1, { 4,  0},  0, 0}, //4A
  {           "LD C, E", 1, { 4,  0},  0, 0}, //4B
  {           "LD C, H", 1, { 4,  0},  0, 0}, //4C
  {           "LD C, L", 1, { 4,  0},  0, 0}, //4D
  {        "LD C, (HL)", 1, { 8,  0},  0, 0}, //4E
  {           "LD C, A", 1, { 4,  0},  0, 0}, //4F
  
  {           "LD D, B", 1, { 4,  0},  0, 0}, //50
  {           "LD D, C", 1, { 4,  0},  0, 0}, //51
  {           "LD D, D", 1, { 4,  0},  0, 0}, //52
  {           "LD D, E", 1, { 4,  0},  0, 0}, //53
  {           "LD D, H", 1, { 4,  0},  0, 0}, //54
  {           "LD D, L", 1, { 4,  0},  0, 0}, //55
  {        "LD D, (HL)", 1, { 8,  0},  0, 0}, //56
  {           "LD D, A", 1, { 4,  0},  0, 0}, //57
  {           "LD E, B", 1, { 4,  0},  0, 0}, //58
  {           "LD E, C", 1, { 4,  0},  0, 0}, //59
  {           "LD E, D", 1, { 4,  0},  0, 0}, //5A
  {           "LD E, E", 1, { 4,  0},  0, 0}, //5B
  {           "LD E, H", 1, { 4,  0},  0, 0}, //5C
  {           "LD E, L", 1, { 4,  0},  0, 0}, //5D
  {        "LD E, (HL)", 1, { 8,  0},  0, 0}, //5E
  {           "LD E, A", 1, { 4,  0},  0, 0}, //5F
  
  {           "LD H, B", 1, { 4,  0},  0, 0}, //60
  {           "LD H, C", 1, { 4,  0},  0, 0}, //61
  {           "LD H, D", 1, { 4,  0},  0, 0}, //62
  {           "LD H, E", 1, { 4,  0},  0, 0}, //63
  {           "LD H, H", 1, { 4,  0},  0, 0}, //64
  {           "LD H, L", 1, { 4,  0},  0, 0}, //65
  {        "LD H, (HL)", 1, { 8,  0},  0, 0}, //66
  {           "LD H, A", 1, { 4,  0},  0, 0}, //67
  {           "LD L, B", 1, { 4,  0},  0, 0}, //68
  {           "LD L, C", 1, { 4,  0},  0, 0}, //69
  {           "LD L, D", 1, { 4,  0},  0, 0}, //6A
  {           "LD L, E", 1, { 4,  0},  0, 0}, //6B
  {           "LD L, H", 1, { 4,  0},  0, 0}, //6C
  {           "LD L, L", 1, { 4,  0},  0, 0}, //6D
  {        "LD L, (HL)", 1, { 8,  0},  0, 0}, //6E
  {           "LD L, A", 1, { 4,  0},  0, 0}, //6F
  
  {        "LD (HL), B", 1, { 8,  0},  0, 0}, //70
  {        "LD (HL), C", 1, { 8,  0},  0, 0}, //71
  {        "LD (HL), D", 1, { 8,  0},  0, 0}, //72
  {        "LD (HL), E", 1, { 8,  0},  0, 0}, //73
  {        "LD (HL), H", 1, { 8,  0},  0, 0}, //74
  {        "LD (HL), L", 1, { 8,  0},  0, 0}, //75
  {              "HALT", 1, { 0,  0},  0, 0}, //76
  {        "LD (HL), A", 1, { 8,  0},  0, 0}, //77
  {           "LD A, B", 1, { 4,  0},  0, 0}, //78
  {           "LD A, C", 1, { 4,  0},  0, 0}, //79
  {           "LD A, D", 1, { 4,  0},  0, 0}, //7A
  {           "LD A, E", 1, { 4,  0},  0, 0}, //7B
  {           "LD A, H", 1, { 4,  0},  0, 0}, //7C
  {           "LD A, L", 1, { 4,  0},  0, 0}, //7D
  {        "LD A, (HL)", 1, { 8,  0},  0, 0}, //7E
  {           "LD A, A", 1, { 4,  0},  0, 0}, //7F
  
  {          "ADD A, B", 1, { 4,  0},  0, 0}, //80
  {          "ADD A, C", 1, { 4,  0},  0, 0}, //81
  {          "ADD A, D", 1, { 4,  0},  0, 0}, //82
  {          "ADD A, E", 1, { 4,  0},  0, 0}, //83
  {          "ADD A, H", 1, { 4,  0},  0, 0}, //84
  {          "ADD A, L", 1, { 4,  0},  0, 0}, //85
  {       "ADD A, (HL)", 1, { 8,  0},  0, 0}, //86
  {          "ADD A, A", 1, { 4,  0},  0, 0}, //87
  {          "ADC A, B", 1, { 4,  0},  0, 0}, //88
  {          "ADC A, C", 1, { 4,  0},  0, 0}, //89
  {          "ADC A, D", 1, { 4,  0},  0, 0}, //8A
  {          "ADC A, E", 1, { 4,  0},  0, 0}, //8B
  {          "ADC A, H", 1, { 4,  0},  0, 0}, //8C
  {          "ADC A, L", 1, { 4,  0},  0, 0}, //8D
  {       "ADC A, (HL)", 1, { 8,  0},  0, 0}, //8E
  {          "ADC A, A", 1, { 4,  0},  0, 0}, //8F
  
  {             "SUB B", 1, { 4,  0},  0, 0}, //90
  {             "SUB C", 1, { 4,  0},  0, 0}, //91
  {             "SUB D", 1, { 4,  0},  0, 0}, //92
  {             "SUB E", 1, { 4,  0},  0, 0}, //93
  {             "SUB H", 1, { 4,  0},  0, 0}, //94
  {             "SUB L", 1, { 4,  0},  0, 0}, //95
  {          "SUB (HL)", 1, { 8,  0},  0, 0}, //96
  {             "SUB A", 1, { 4,  0},  0, 0}, //97
  {          "SBC A, B", 1, { 4,  0},  0, 0}, //98
  {          "SBC A, C", 1, { 4,  0},  0, 0}, //99
  {          "SBC A, D", 1, { 4,  0},  0, 0}, //9A
  {          "SBC A, E", 1, { 4,  0},  0, 0}, //9B
  {          "SBC A, H", 1, { 4,  0},  0, 0}, //9C
  {          "SBC A, L", 1, { 4,  0},  0, 0}, //9D
  {       "SBC A, (HL)", 1, { 8,  0},  0, 0}, //9E
  {          "SBC A, A", 1, { 4,  0},  0, 0}, //9F
  
  {             "AND B", 1, { 4,  0},  0, 0}, //A0
  {             "AND C", 1, { 4,  0},  0, 0}, //A1
  {             "AND D", 1, { 4,  0},  0, 0}, //A2
  {             "AND E", 1, { 4,  0},  0, 0}, //A3
  {             "AND H", 1, { 4,  0},  0, 0}, //A4
  {             "AND L", 1, { 4,  0},  0, 0}, //A5
  {          "AND (HL)", 1, { 8,  0},  0, 0}, //A6
  {             "AND A", 1, { 4,  0},  0, 0}, //A7
  {             "XOR B", 1, { 4,  0},  0, 0}, //A8
  {             "XOR C", 1, { 4,  0},  0, 0}, //A9
  {             "XOR D", 1, { 4,  0},  0, 0}, //AA
  {             "XOR E", 1, { 4,  0},  0, 0}, //AB
  {             "XOR H", 1, { 4,  0},  0, 0}, //AC
  {             "XOR L", 1, { 4,  0},  0, 0}, //AD
  {          "XOR (HL)", 1, { 8,  0},  0, 0}, //AE
  {             "XOR A", 1, { 4,  0},  0, 0}, //AF
  
  {              "OR B", 1, { 4,  0},  0, 0}, //B0
  {              "OR C", 1, { 4,  0},  0, 0}, //B1
  {              "OR D", 1, { 4,  0},  0, 0}, //B2
  {              "OR E", 1, { 4,  0},  0, 0}, //B3
  {              "OR H", 1, { 4,  0},  0, 0}, //B4
  {              "OR L", 1, { 4,  0},  0, 0}, //B5
  {           "OR (HL)", 1, { 8,  0},  0, 0}, //B6
  {              "OR A", 1, { 4,  0},  0, 0}, //B7
  {              "CP B", 1, { 4,  0},  0, 0}, //B8
  {              "CP C", 1, { 4,  0},  0, 0}, //B9
  {              "CP D", 1, { 4,  0},  0, 0}, //BA
  {              "CP E", 1, { 4,  0},  0, 0}, //BB
  {              "CP H", 1, { 4,  0},  0, 0}, //BC
  {              "CP L", 1, { 4,  0},  0, 0}, //BD
  {           "CP (HL)", 1, { 8,  0},  0, 0}, //BE
  {              "CP A", 1, { 4,  0},  0, 0}, //BF
  
  {            "RET NZ", 1, {20,  8},  0, 0}, //C0
  {            "POP BC", 1, {12,  0},  0, 0}, //C1
  {      "JP NZ (%.2X)", 3, {16, 12},  0, 0}, //C2
  {         "JP (%.2X)", 3, {16,  0},  0, 0}, //C3
  {    "CALL NZ (%.2X)", 3, {24, 12},  0, 0}, //C4
  {           "PUSH BC", 1, {16,  0},  0, 0}, //C5
  {       "ADD A, %.2X", 2, { 8,  0},  0, 0}, //C6
  {            "RST 0H", 1, {16,  0},  0, 0}, //C7
  {             "RET Z", 1, {20,  8},  0, 0}, //C8
  {               "RET", 1, {16,  0},  0, 0}, //C9
  {       "JP Z (%.2X)", 3, {16, 12},  0, 0}, //CA
  {                  "", 0, { 0,  0},  0, 0}, //CB
  {     "CALL Z (%.2X)", 3, {24, 12},  0, 0}, //CC
  {     "CALL (0x%.2X)", 3, {24,  0},  0, 0}, //CD
  {       "ADC A, %.2X", 2, { 8,  0},  0, 0}, //CE
  {            "RST 8H", 1, {16,  0},  0, 0}, //CF
  
  {            "RET NC", 1, {20,  8},  0, 0}, //D0
  {            "POP DE", 1, {12,  0},  0, 0}, //D1
  {      "JP NC (%.2X)", 3, {16, 12},  0, 0}, //D2
  {           "INVALID", 1, { 0,  0},  0, 0}, //D3
  {    "CALL NC (%.2X)", 3, {24, 12},  0, 0}, //D4
  {           "PUSH DE", 1, {16,  0},  0, 0}, //D5
  {          "SUB %.2X", 2, { 8,  0},  0, 0}, //D6
  {           "RST 10H", 1, {16,  0},  0, 0}, //D7
  {             "RET C", 1, {20,  8},  0, 0}, //D8
  {              "RETI", 1, {16,  0},  0, 0}, //D9
  {       "JP C (%.2X)", 3, {16, 12},  0, 0}, //DA
  {           "INVALID", 1, { 0,  0},  0, 0}, //DB
  {     "CALL C (%.2X)", 3, {24, 12},  0, 0}, //DC
  {                  "", 0, { 0,  0},  0, 0}, //DD
  {     "SBC A, (%.2X)", 2, { 8,  0},  0, 0}, //DE
  {           "RST 18H", 1, {16,  0},  0, 0}, //DF
  
  { "LD (FF00+%.2X), A", 2, {12,  0},  0, 0}, //E0
  {            "POP HL", 1, {12,  0},  0, 0}, //E1
  {     "LD (FF00+C),A", 1, { 8,  0},  0, 0}, //E2
  {           "INVALID", 1, { 0,  0},  0, 0}, //E3
  {           "INVALID", 1, { 0,  0},  0, 0}, //E4
  {           "PUSH HL", 1, {16,  0},  0, 0}, //E5
  {          "AND %.2X", 2, { 8,  0},  0, 0}, //E6
  {           "RST 20H", 1, {16,  0},  0, 0}, //E7
  {      "ADD SP, %+2d", 2, {16,  0},  0, 1}, //E8
  {           "JP (HL)", 1, { 4,  0},  0, 0}, //E9
  {      "LD (%.2X), A", 3, {16,  0},  0, 0}, //EA
  {           "INVALID", 1, { 0,  0},  0, 0}, //EB
  {           "INVALID", 1, { 0,  0},  0, 0}, //EC
  {                  "", 0, { 0,  0},  0, 0}, //ED
  {          "XOR %.2X", 2, { 8,  0},  0, 0}, //EE
  {           "RST 28H", 1, {16,  0},  0, 0}, //EF
  
  { "LD A, (FF00+%.2X)", 2, {12,  0},  0, 0}, //F0
  {            "POP AF", 1, {12,  0},  0, 0}, //F1
  {     "LD A,(FF00+C)", 1, { 8,  0},  0, 0}, //F2
  {                "DI", 1, { 4,  0},  0, 0}, //F3
  {           "INVALID", 1, { 0,  0},  0, 0}, //F4
  {           "PUSH AF", 1, {16,  0},  0, 0}, //F5
  {           "OR %.2X", 2, { 8,  0},  0, 0}, //F6
  {           "RST 30H", 1, {16,  0},  0, 0}, //F7
  {     "LD HL, SP%+2d", 2, {12,  0},  0, 1}, //F8
  {         "LD SP, HL", 1, { 8,  0},  0, 0}, //F9
  {      "LD A, (%.2X)", 3, {16,  0},  0, 0}, //FA
  {                "EI", 1, { 4,  0},  0, 0}, //FB
  {           "INVALID", 1, { 0,  0},  0, 0}, //FC
  {                  "", 0, { 0,  0},  0, 0}, //FD
  {           "CP %.2X", 2, { 8,  0},  0, 0}, //FE
  {           "RST 38H", 1, {16,  0},  0, 0}  //FF
};

const char *Opcodes::cbMnemonics[] = 
{    "RLC B",    "RLC C",    "RLC D",    "RLC E",    "RLC H",    "RLC L",    "RLC (HL)",    "RLC A",
     "RRC B",    "RRC C",    "RRC D",    "RRC E",    "RRC H",    "RRC L",    "RRC (HL)",    "RRC A",
     "RL B",     "RL C",     "RL D",     "RL E",     "RL H",     "RL L",     "RL (HL)",     "RL A",
     "RR B",     "RR C",     "RR D",     "RR E",     "RR H",     "RR L",     "RR (HL)",     "RR A",
     "SLA B",    "SLA C",    "SLA D",    "SLA E",    "SLA H",    "SLA L",    "SLA (HL)",    "SLA A",
     "SRA B",    "SRA C",    "SRA D",    "SRA E",    "SRA H",    "SRA L",    "SRA (HL)",    "SRA A",
    "SWAP B",   "SWAP C",   "SWAP D",   "SWAP E",   "SWAP H",   "SWAP L",   "SWAP (HL)",   "SWAP A",
     "SRL B",    "SRL C",    "SRL D",    "SRL E",    "SRL H",    "SRL L",    "SRL (HL)",    "SRL A",
     "BIT 0, B", "BIT 0, C", "BIT 0, D", "BIT 0, E", "BIT 0, H", "BIT 0, L", "BIT 0, (HL)", "BIT 0, A", 
     "BIT 1, B", "BIT 1, C", "BIT 1, D", "BIT 1, E", "BIT 1, H", "BIT 1, L", "BIT 1, (HL)", "BIT 1, A", 
     "BIT 2, B", "BIT 2, C", "BIT 2, D", "BIT 2, E", "BIT 2, H", "BIT 2, L", "BIT 2, (HL)", "BIT 2, A", 
     "BIT 3, B", "BIT 3, C", "BIT 3, D", "BIT 3, E", "BIT 3, H", "BIT 3, L", "BIT 3, (HL)", "BIT 3, A", 
     "BIT 4, B", "BIT 4, C", "BIT 4, D", "BIT 4, E", "BIT 4, H", "BIT 4, L", "BIT 4, (HL)", "BIT 4, A", 
     "BIT 5, B", "BIT 5, C", "BIT 5, D", "BIT 5, E", "BIT 5, H", "BIT 5, L", "BIT 5, (HL)", "BIT 5, A", 
     "BIT 6, B", "BIT 6, C", "BIT 6, D", "BIT 6, E", "BIT 6, H", "BIT 6, L", "BIT 6, (HL)", "BIT 6, A", 
     "BIT 7, B", "BIT 7, C", "BIT 7, D", "BIT 7, E", "BIT 7, H", "BIT 7, L", "BIT 7, (HL)", "BIT 7, A", 
     "RES 0, B", "RES 0, C", "RES 0, D", "RES 0, E", "RES 0, H", "RES 0, L", "RES 0, (HL)", "RES 0, A", 
     "RES 1, B", "RES 1, C", "RES 1, D", "RES 1, E", "RES 1, H", "RES 1, L", "RES 1, (HL)", "RES 1, A", 
     "RES 2, B", "RES 2, C", "RES 2, D", "RES 2, E", "RES 2, H", "RES 2, L", "RES 2, (HL)", "RES 2, A", 
     "RES 3, B", "RES 3, C", "RES 3, D", "RES 3, E", "RES 3, H", "RES 3, L", "RES 3, (HL)", "RES 3, A", 
     "RES 4, B", "RES 4, C", "RES 4, D", "RES 4, E", "RES 4, H", "RES 4, L", "RES 4, (HL)", "RES 4, A", 
     "RES 5, B", "RES 5, C", "RES 5, D", "RES 5, E", "RES 5, H", "RES 5, L", "RES 5, (HL)", "RES 5, A", 
     "RES 6, B", "RES 6, C", "RES 6, D", "RES 6, E", "RES 6, H", "RES 6, L", "RES 6, (HL)", "RES 6, A", 
     "RES 7, B", "RES 7, C", "RES 7, D", "RES 7, E", "RES 7, H", "RES 7, L", "RES 7, (HL)", "RES 7, A",
     "SET 0, B", "SET 0, C", "SET 0, D", "SET 0, E", "SET 0, H", "SET 0, L", "SET 0, (HL)", "SET 0, A", 
     "SET 1, B", "SET 1, C", "SET 1, D", "SET 1, E", "SET 1, H", "SET 1, L", "SET 1, (HL)", "SET 1, A", 
     "SET 2, B", "SET 2, C", "SET 2, D", "SET 2, E", "SET 2, H", "SET 2, L", "SET 2, (HL)", "SET 2, A", 
     "SET 3, B", "SET 3, C", "SET 3, D", "SET 3, E", "SET 3, H", "SET 3, L", "SET 3, (HL)", "SET 3, A", 
     "SET 4, B", "SET 4, C", "SET 4, D", "SET 4, E", "SET 4, H", "SET 4, L", "SET 4, (HL)", "SET 4, A", 
     "SET 5, B", "SET 5, C", "SET 5, D", "SET 5, E", "SET 5, H", "SET 5, L", "SET 5, (HL)", "SET 5, A", 
     "SET 6, B", "SET 6, C", "SET 6, D", "SET 6, E", "SET 6, H", "SET 6, L", "SET 6, (HL)", "SET 6, A", 
     "SET 7, B", "SET 7, C", "SET 7, D", "SET 7, E", "SET 7, H", "SET 7, L", "SET 7, (HL)", "SET 7, A"
};

uint8_t Opcodes::cpuCycles(uint8_t opcode, uint8_t opcode2, bool branchTaken)
{
  if (opcode == 0xCB)
  {
    if ((opcode2 & 0x07) == 0x06)
    {
      if ((opcode2 & 0xC0) == 0x40)
        return 12;
      else
        return 16;
    }
    else
      return 8;
  }
  else
    return opcodesSpecs[opcode].cycles[branchTaken ? 0 : 1];
}

void Opcodes::visualOpcode(char *buffer, uint8_t d1, uint8_t d2, uint8_t d3)
{  
  if (d1 != mos6502::OPCODE_BITS)
  {
    mos6502::OpcodeGB params = mos6502::Opcodes::opcodesSpecs[d1];
    int length = params.length;
    
    if (length == 1)
      sprintf(buffer, "%s", params.name);
    else if (length == 2)
      sprintf(buffer, params.name, params.paramsSign ? (int)d2 : d2);
    else if (length == 3)
      sprintf(buffer, params.name, (d3 << 8) | d2);
  }
  else
  {
    sprintf(buffer, "%s", mos6502::Opcodes::cbMnemonics[d2]);
  }
}